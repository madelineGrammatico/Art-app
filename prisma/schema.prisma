// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artwork {
  id            String        @id @default(uuid())
  title         String
  price         Decimal

  ownerId       String?
  owner         User?         @relation(fields: [ownerId], references: [id])
  invoice       Invoice[]
  certificateId String?       @unique
  certificate   Certificate?
  createdAt     DateTime      @default(now())

  @@index([ownerId])
}

model Certificate {
  id          String    @id @default(uuid())
  artworkId   String    @unique 
  artwork     Artwork?  @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  issueDate   DateTime
  content     String
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

model Invoice {
  id          String        @id @default(uuid())
  artworkId   String
  artwork     Artwork       @relation(fields: [artworkId], references: [id])
  buyerId     String
  buyer       User          @relation(fields: [buyerId], references: [id], onDelete: Restrict)
  createdAt   DateTime      @default(now())
  amount      Decimal      
  status      InvoiceStatus

  @@index([buyerId])
  @@index([artworkId])
}

enum UserRole {
  ADMIN
  CLIENT
}

model User {
  id                  String                @id @default(uuid())
  name                String?
  lastName            String?
  firstName           String?
  email               String?               @unique
  emailVerified       DateTime?
  password            String?
  image               String?
  role                UserRole              @default(CLIENT)

  invoices            Invoice[]
  artworks            Artwork[]
  passwordResetTokens PasswordResetToken[]  
  accounts            Account[]
  sessions            Session[]
  refreshTokens       RefreshToken[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  token     String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expireAt  DateTime
  createdAt DateTime  @default(now())
}

model Account {
  id                String    @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String   @id @default(uuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}
 
// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime
 
//   @@unique([identifier, token])
// }
 
// // Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@id([userId, credentialID])
// }