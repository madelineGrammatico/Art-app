// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Artwork {
  id        String       @id @default(cuid())
  title     String
  price     String

  invoice   Invoice[]
  certificate Certificate?
  createdAt DateTime  @default(now())
  
}
model Certificate {
  id          String  @id @default(cuid())
  artworkId   String  @unique
  artwork     Artwork @relation(fields: [artworkId], references: [id])
  isssueDate  DateTime
  content     String
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

model Invoice {
  id          String        @id @default(cuid())
  artworkId   String
  artwork     Artwork       @relation(fields: [artworkId], references: [id])
  buyerId     String
  buyer       User          @relation(fields: [buyerId], references: [id])
  invoiceDate DateTime      @default(now())
  amount      Decimal
  status      InvoiceStatus
}

enum UserRole {
  ADMIN
  CLIENT
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  lastName            String?
  firstName           String?
  email               String?              @unique
  emailVerified       DateTime?
  password            String?
  image               String?
  role                UserRole           @default(CLIENT)
  
  invoices            Invoice[]

  passwordResetTokens PasswordResetToken[]  
  accounts            Account[]
  sessions            Session[]
  refreshTokens       RefreshToken[]
  // Optional for WebAuthn support
  Authenticator       Authenticator[]
 
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  token     String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expireAt  DateTime
  createdAt DateTime  @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}